package algorithms

import (
	"testing"
)

func TestFactorial(t *testing.T) {

	type testpair struct {
		value  int
		result int
	}

	var tests = []testpair{
		{1, 1},
		{2, 2},
		{3, 6},
		{10, 3628800},
		{20, 2432902008176640000},
	}

	for _, pair := range tests {
		v := Factorial(pair.value)
		if v != pair.result {
			t.Error(
				"For", pair.value,
				"expected", pair.result,
				"got", v,
			)
		}
	}
}

func TestTowersOfHanoi(t *testing.T) {

	type testpair struct {
		num    int
		result string
	}

	var tests = []testpair{
		{1, "1AC"},
		{2, "1AB2AC1BC"},
		{3, "1AC2AB1CB3AC1BA2BC1AC"},
		{4, "1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC"},
		{10, "1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC7AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA6CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB8AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC6BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA7BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC9AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA6CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB7CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC6BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA8CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC7AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA6CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB10AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC6BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA7BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC8BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA6CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB7CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC6BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA9BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC7AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA6CB1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB8AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC6BA1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB5CA1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA7BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC5AB1CA2CB1AB3CA1BC2BA1CA4CB1AB2AC1BC3AB1CA2CB1AB6AC1BC2BA1CA3BC1AB2AC1BC4BA1CA2CB1AB3CA1BC2BA1CA5BC1AB2AC1BC3AB1CA2CB1AB4AC1BC2BA1CA3BC1AB2AC1BC"},
	}

	for _, pair := range tests {
		v := TowersOfHanoi(pair.num)
		if v != pair.result {
			t.Error(
				"For", pair.num,
				"expected", pair.result,
				"got", v,
			)
		}
	}
}

func TestGCD(t *testing.T) {

	type testpair struct {
		values []int
		result int
	}

	var tests = []testpair{
		{[]int{1, 2}, 1},
		{[]int{3, 2}, 1},
		{[]int{6, 2}, 2},
		{[]int{4534532, 576452}, 4},
		{[]int{97406784, 123456}, 123456},
	}

	for _, pair := range tests {
		v := GCD(pair.values[0], pair.values[1])
		if v != pair.result {
			t.Error(
				"For", pair.values[0], "and", pair.values[1],
				"expected", pair.result,
				"got", v,
			)
		}
	}
}
